[{"/Users/danidona/Desktop/DPL/MAP/client/src/components/SeeHistory.js":"1","/Users/danidona/Desktop/DPL/MAP/client/src/App.js":"2","/Users/danidona/Desktop/DPL/MAP/client/src/user/UserEditForm.js":"3","/Users/danidona/Desktop/DPL/MAP/client/src/exercises/Exercises.js":"4","/Users/danidona/Desktop/DPL/MAP/client/src/submissions/SubmissionsAdmin.js":"5","/Users/danidona/Desktop/DPL/MAP/client/src/components/NavBar.js":"6","/Users/danidona/Desktop/DPL/MAP/client/src/exercises/Exercise.js":"7","/Users/danidona/Desktop/DPL/MAP/client/src/components/Comment.js":"8","/Users/danidona/Desktop/DPL/MAP/client/src/components/LevelForm.js":"9"},{"size":3723,"mtime":1611846224319,"results":"10","hashOfConfig":"11"},{"size":3104,"mtime":1611846224318,"results":"12","hashOfConfig":"11"},{"size":2341,"mtime":1611823058650,"results":"13","hashOfConfig":"11"},{"size":4746,"mtime":1611772992020,"results":"14","hashOfConfig":"11"},{"size":2118,"mtime":1611333836405,"results":"15","hashOfConfig":"11"},{"size":1802,"mtime":1611772992017,"results":"16","hashOfConfig":"11"},{"size":2805,"mtime":1611772992019,"results":"17","hashOfConfig":"11"},{"size":2449,"mtime":1611246858812,"results":"18","hashOfConfig":"11"},{"size":5434,"mtime":1611863706459,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"1plf4jg",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"/Users/danidona/Desktop/DPL/MAP/client/src/components/SeeHistory.js",["40","41","42","43"],"import Axios from \"axios\";\nimport { useContext, useEffect, useReducer, useState } from \"react\";\nimport { Button, Col, Row } from \"react-bootstrap\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { AuthContext } from \"../providers/AuthProvider\";\n\nconst SeeHistory = () => {\n  const [exercise, setExercise] = useState({})\n  const [submissions, setSubmissions] = useState([])\n  const [submission, setSubmission] = useState([])\n\n  const { exercise_id } = useParams()\n\n  const { user } = useContext(AuthContext)\n\n  useEffect(() => {\n    getExercise()\n    exerciseSubmissions()\n  }, []);\n\n  const getExercise = async () => {\n    try {\n      let res = await Axios.get(`/api/exercises/${exercise_id}`)\n      console.log(res.data)\n      setExercise(res.data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const exerciseSubmissions = () => {\n    Axios.get(`/api/exercise_subs/?exercise_id=${exercise_id}`)\n    .then((response) => {\n      console.log(response.data)\n      setSubmissions(response.data)\n      setSubmission(response.data[0])\n    })\n    .catch((err) => {\n      console.log(err)\n    })\n  }\n\n  const renderSubmissions = () => {\n    return submissions.map((submission)=>{\n      return (\n        <p onClick={()=>{renderClickedSubmission(submission)}}>{submission.created_at} | {exercise.activity} | lbs? | pending </p>\n      )\n    })\n  }\n\n  const renderClickedSubmission = (newSubmission) => {\n    setSubmission(newSubmission)\n    renderVideo(newSubmission);\n  }\n\n  const renderVideo = () => {\n    return (\n      <video \n          className='d-block w-100'\n          src={submission.video}\n          alt=\"Submission video\"\n          style={{height:'450px', width:'500px'}}\n        />\n    )\n  }\n\n  const renderInfo = () => {\n      return <h3>Id: {submission.id} | {submission.created_at} | {user.weight}lbs</h3>\n  }\n\n  const saveTheRender = () => {\n    if(submissions.length === 0) {\n        return (\n          <>\n            <h1>Oops! Looks like you havenâ€™t made any submissions for this exercise. Go make one and then come back!</h1>\n            <h1 style={{textAlign:'center'}}><a class='btn btn-primary'  href={`/showexercise/${exercise_id}`}>Go Back</a></h1>\n          </>\n        )\n    } else {\n        return (\n          <>\n            <a class='btn btn-light'  href={`/showexercise/${exercise_id}`}>Back</a>\n              <Row>\n                <Col>\n                  <h1>VIDEO</h1>\n                  {renderVideo()}\n                </Col>\n                <Col>\n                  <div>\n                    <h1>{exercise.activity}</h1>\n                    {/* <p>level?</p> */} \n                  </div>\n                  <div style={{paddingBottom:'60px', paddingTop:'20px'}}>\n                    {renderInfo()}\n                    <h3 style={{border:'2px solid orange', borderRadius:'20%', width:'110px'}}>Pending</h3>\n                    {/* \n                        <h3 style={{border:'2px solid green', borderRadius:'20%', width:'110px'}}>Completed</h3>\n                        <h3 style={{border:'2px solid red', borderRadius:'20%', width:'110px'}}>Failed</h3> \n                        how do I make this border stick just around 'Pending' or whatever will be written there?\n                        We should make so if it's completed it's green, pending, is orange, and failed is red.\n                    */}\n                  </div>\n                  <div style={{border:'1px solid black'}}>\n                    <h5>History</h5>\n                      {renderSubmissions()}\n                    <p>infinite scroll?</p>\n                  </div>\n                </Col>\n              </Row>\n          </>\n        )\n      }\n    }\n    return saveTheRender()\n  }\n\nexport default SeeHistory;","/Users/danidona/Desktop/DPL/MAP/client/src/App.js",[],"/Users/danidona/Desktop/DPL/MAP/client/src/user/UserEditForm.js",[],"/Users/danidona/Desktop/DPL/MAP/client/src/exercises/Exercises.js",["44","45","46"],"/Users/danidona/Desktop/DPL/MAP/client/src/submissions/SubmissionsAdmin.js",[],"/Users/danidona/Desktop/DPL/MAP/client/src/components/NavBar.js",["47"],"/Users/danidona/Desktop/DPL/MAP/client/src/exercises/Exercise.js",["48","49"],"/Users/danidona/Desktop/DPL/MAP/client/src/components/Comment.js",["50","51"],"/Users/danidona/Desktop/DPL/MAP/client/src/components/LevelForm.js",["52"],"import { useState } from \"react\";\nimport axios from \"axios\";\nimport { Button, Col, Form } from \"react-bootstrap\";\n\nconst LevelForm = ({\n  levelProp,\n  addLevel,\n  exerciseID,\n  editLevel,\n  handleEditClose,\n  addModalHide,\n  editLevels,\n}) => {\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [level, setLevel] = useState(\n    levelProp\n      ? {\n          name: levelProp.name,\n          metric: levelProp.metric,\n          multiplier: levelProp.multiplier,\n          measurement: levelProp.measurement,\n          reps: levelProp.reps,\n          timeframe: levelProp.timeframe,\n          sets: levelProp.sets,\n        }\n      : {\n          name: \"\",\n          metric: \"\",\n          multiplier: null,\n          measurement: \"\",\n          reps: null,\n          timeframe: null,\n          sets: null,\n        }\n  );\n\n  const editCallLevel = () => {\n    axios\n      .put(`/api/exercises/${exerciseID}/levels/${levelProp.id}`, level)\n      .then((res) => {\n        console.log(res.data);\n        editLevel(res.data);\n        editLevels(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const addCallLevel = () => {\n    axios\n      .post(`/api/exercises/${exerciseID}/levels`, level)\n      .then((res) => {\n        console.log(level);\n        addLevel(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handleChange = (e) => {\n    setLevel({ ...level, [e.target.name]: e.target.value });\n    console.log(e.target.name);\n    console.log(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (levelProp) {\n      editCallLevel();\n    } else {\n      addCallLevel();\n    }\n    whichClose();\n  };\n\n  const whichClose = () => {\n    if (levelProp) {\n      handleEditClose();\n    } else {\n      addModalHide();\n    }\n  };\n\n  // let minute = Math.floor(timeframe/60)\n  // let seconds = timeframe%60 < 10 ? \"0\" + timeframe%60 : timeframe%60\n  // let duration = minute + \":\" + seconds\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Form.Label>Name</Form.Label>\n        <Form.Control\n          name=\"name\"\n          placeholder=\"Your level name\"\n          value={level.name}\n          onChange={handleChange}\n        />\n        <Form.Label>Multiplier</Form.Label>\n        <Form.Control\n          name=\"multiplier\"\n          placeholder=\"e.g. 2.0, 1.75, etc.\"\n          type=\"number\"\n          value={level.multiplier}\n          onChange={handleChange}\n        />\n        <Form.Row>\n          <Form.Group as={Col}>\n            <Form.Label>Metrics</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name=\"metric\"\n              value={level.metric}\n              onChange={handleChange}\n            >\n              <option>Choose a metric...</option>\n              <option>Pounds</option>\n              <option>Calories</option>\n              <option>None</option>\n            </Form.Control>\n          </Form.Group>\n          <Form.Group as={Col}>\n            <Form.Label>Measurement</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name=\"measurement\"\n              value={level.measurement}\n              onChange={handleChange}\n            >\n              <option>Choose a measurement...</option>\n              <option>Bodyweight</option>\n              <option>Height</option>\n            </Form.Control>\n          </Form.Group>\n        </Form.Row>\n        <Form.Label>Reps</Form.Label>\n        <Form.Control\n          name=\"reps\"\n          type=\"number\"\n          placeholder=\"e.g. reps of 10\"\n          value={level.reps}\n          onChange={handleChange}\n        />\n        <Form.Label>Time Frame</Form.Label>\n        <Form.Row>\n          <Form.Group as={Col}>\n            <Form.Control\n              name=\"minutes\"\n              type=\"number\"\n              placeholder=\"e.g. 1 minute\"\n              value={Math.floor(level.timeframe / 60)}\n              onChange={(e) => {\n                setLevel({\n                  ...level,\n                  timeframe: parseInt(e.target.value) * 60,\n                });\n                setMinutes(parseInt(e.target.value) * 60);\n              }}\n            />{\" \"}\n            <p>Minute</p>\n          </Form.Group>\n\n          <Form.Group as={Col}>\n            <Form.Control\n              name=\"seconds\"\n              type=\"number\"\n              placeholder=\"e.g. 30 Seconds\"\n              value={level.timeframe % 60}\n              onChange={(e) => {\n                setLevel({\n                  ...level,\n                  timeframe: parseInt(minutes) + parseInt(e.target.value),\n                });\n                setSeconds(parseInt(e.target.value));\n              }}\n            />{\" \"}\n            <p>Seconds</p>\n          </Form.Group>\n        </Form.Row>\n        {/* <p>Duration: {level.timeframe}</p> */}\n        <Form.Label>Sets</Form.Label>\n        <Form.Control\n          name=\"sets\"\n          type=\"number\"\n          placeholder=\"e.g. 3 sets\"\n          value={level.sets}\n          onChange={handleChange}\n        />\n        <Button variant=\"primary\" type=\"submit\">\n          submit\n        </Button>\n        <Button variant=\"danger\" onClick={whichClose}>\n          cancel\n        </Button>\n      </Form>\n    </>\n  );\n};\nexport default LevelForm;\n\n// Math.floor(level.timeframe/60)\n// level.timeframe%60 < 10 ? \"0\" + level.timeframe%60 : level.timeframe%60\n",{"ruleId":"53","severity":1,"message":"54","line":2,"column":33,"nodeType":"55","messageId":"56","endLine":2,"endColumn":43},{"ruleId":"53","severity":1,"message":"57","line":3,"column":10,"nodeType":"55","messageId":"56","endLine":3,"endColumn":16},{"ruleId":"53","severity":1,"message":"58","line":4,"column":10,"nodeType":"55","messageId":"56","endLine":4,"endColumn":14},{"ruleId":"59","severity":1,"message":"60","line":19,"column":6,"nodeType":"61","endLine":19,"endColumn":8,"suggestions":"62"},{"ruleId":"53","severity":1,"message":"63","line":7,"column":8,"nodeType":"55","messageId":"56","endLine":7,"endColumn":14},{"ruleId":"53","severity":1,"message":"64","line":14,"column":10,"nodeType":"55","messageId":"56","endLine":14,"endColumn":20},{"ruleId":"59","severity":1,"message":"65","line":23,"column":6,"nodeType":"61","endLine":23,"endColumn":8,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":5,"column":1,"nodeType":"69","endLine":80,"endColumn":3},{"ruleId":"53","severity":1,"message":"70","line":6,"column":8,"nodeType":"55","messageId":"56","endLine":6,"endColumn":25},{"ruleId":"53","severity":1,"message":"71","line":10,"column":11,"nodeType":"55","messageId":"56","endLine":10,"endColumn":19},{"ruleId":"53","severity":1,"message":"72","line":7,"column":10,"nodeType":"55","messageId":"56","endLine":7,"endColumn":21},{"ruleId":"53","severity":1,"message":"73","line":7,"column":23,"nodeType":"55","messageId":"56","endLine":7,"endColumn":37},{"ruleId":"53","severity":1,"message":"74","line":15,"column":10,"nodeType":"55","messageId":"56","endLine":15,"endColumn":17},"no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'exerciseSubmissions' and 'getExercise'. Either include them or remove the dependency array.","ArrayExpression",["75"],"'styled' is defined but never used.","'totalPages' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getExercises'. Either include it or remove the dependency array.",["76"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'ShowExerciseAdmin' is defined but never used.","'exercise' is assigned a value but never used.","'editComment' is assigned a value but never used.","'setEditComment' is assigned a value but never used.","'seconds' is assigned a value but never used.",{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [exerciseSubmissions, getExercise]",{"range":"81","text":"82"},"Update the dependencies array to be: [getExercises]",{"range":"83","text":"84"},[589,591],"[exerciseSubmissions, getExercise]",[799,801],"[getExercises]"]